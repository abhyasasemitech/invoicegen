generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  firstName     String?
  lastName      String?
  address       String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  accounts      Account[]
  Authenticator Authenticator[]
  invoices      Invoice[]
  sessions      Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Invoice {
  id                     String        @id @default(uuid())
  invoiceName            String
  total                  Int
  status                 InvoiceStatus
  date                   DateTime
  dueDate                Int
  fromName               String
  fromEmail              String
  formAddress            String
  clientName             String
  clientEmail            String
  clientAddress          String
  currency               String
  invoiceNumber          String
  note                   String?
  invoiceItemDescription String
  invoiceItemQuantity    Int
  invoiceItemRate        Int
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  userId                 String?
  User                   User?         @relation(fields: [userId], references: [id])
}

enum InvoiceStatus {
  PAID
  PENDING
}
